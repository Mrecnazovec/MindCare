import { Button } from '@/components/ui/Button'
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form-elements/Form'
import { Input } from '@/components/ui/form-elements/Input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/Select'
import { Textarea } from '@/components/ui/Textarea'
import { validPhone } from '@/shared/regex'
import { useEffect, useState } from 'react'
import { SubmitHandler, useForm } from 'react-hook-form'
import axios from 'axios'
import toast from 'react-hot-toast'

interface IClaimInput {
	name: string
	tel: string
	interests: string
	message: string
}

export function ClaimForm() {
	const [isAnon, setIsAnon] = useState<boolean>(false)

	const form = useForm<IClaimInput>({
		mode: 'onChange',
		defaultValues: {
			name: '',
			tel: '',
			interests: '',
			message: '',
		},
	})

	const { control, handleSubmit, setValue } = form

	useEffect(() => {
		if (isAnon) {
			setValue('name', '–ê–Ω–æ–Ω–∏–º')
			setValue('tel', '+00000000000')
		}
		if (!isAnon) {
			setValue('name', '')
			setValue('tel', '')
		}
	}, [isAnon, setValue])

	const sendToTelegram = async (data: IClaimInput) => {
		const chatId = '-1002530828160'
		const token = '7628175184:AAFg9qjBIBT3TA3FJ0-m0Ll0rOSegc7DSuE'
		const url = `https://api.telegram.org/bot${token}/sendMessage`

		const message = `
			üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:
		üë§ –ò–º—è: ${data.name}
		üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.tel}
		üí° –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: ${data.interests}
		üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}
		`

		try {
			const response = await axios.post(url, {
				chat_id: chatId,
				text: message,
				parse_mode: 'Markdown',
			})
			toast.success('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
		} catch (error) {
			toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
		}
	}

	const onSubmit: SubmitHandler<IClaimInput> = (data) => {
		// alert(`–ò–º—è: ${data.name}, –¢–µ–ª–µ—Ñ–æ–Ω: ${data.tel}, –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: ${data.interests}, –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}`)
		sendToTelegram(data)
		form.reset()
	}
	return (
		<div className='w-full'>
			<h2 className='text-2xl font-semibold mb-3 text-[#242424] text-center'>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É</h2>
			<Form {...form}>
				<form onSubmit={handleSubmit(onSubmit)}>
					<FormField
						control={control}
						name='name'
						rules={{ required: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }}
						render={({ field }) => (
							<FormItem>
								<FormLabel className='text-muted-foreground text-lg'>–ò–º—è</FormLabel>
								<FormControl>
									<Input
										className='rounded-[15px] border-2 border-[#E4E5E5] placeholder:text:[#E2E2E2] h-15 text-lg mb-4'
										placeholder={isAnon ? '–ê–Ω–æ–Ω–∏–º' : '–í–≤–µ–¥–∏—Ç–µ –∏–º—è'}
										disabled={isAnon}
										{...field}
									/>
								</FormControl>
								<FormMessage />
							</FormItem>
						)}
					/>
					<FormField
						control={control}
						name='tel'
						rules={{ required: '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', pattern: { value: validPhone, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' } }}
						render={({ field }) => (
							<FormItem>
								<FormLabel className='text-muted-foreground text-lg'>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</FormLabel>
								<FormControl>
									<Input
										className='rounded-[15px] border-2 border-[#E4E5E5] placeholder:text:[#E2E2E2] h-15 text-lg mb-4'
										placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
										disabled={isAnon}
										{...field}
									/>
								</FormControl>
								<FormMessage />
							</FormItem>
						)}
					/>
					<FormField
						control={control}
						name='interests'
						rules={{ required: '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞' }}
						render={({ field }) => (
							<FormItem>
								<FormLabel className='text-muted-foreground text-lg'>–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</FormLabel>
								<Select
									onValueChange={(value) => {
										field.onChange(value)
										setIsAnon(value === '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å')
									}}
									defaultValue={field.value}
								>
									<FormControl>
										<SelectTrigger className='w-full rounded-[15px] border-2 border-[#E4E5E5] placeholder:text:[#E2E2E2] data-[size=default]:h-15 text-lg mb-4 overflow-hidden whitespace-nowrap text-ellipsis'>
											<SelectValue placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞' />
										</SelectTrigger>
									</FormControl>
									<SelectContent>
										<SelectItem value='–ü–æ–¥–±–æ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∞'>–ü–æ–¥–±–æ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∞</SelectItem>
										<SelectItem value='–•–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥'>–•–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥</SelectItem>
										<SelectItem value='–ï—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Å–∞–π—Ç'>–ï—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Å–∞–π—Ç</SelectItem>
										<SelectItem value='–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å'>
											–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å <span className='text-muted-foreground'>(–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</span>
										</SelectItem>
									</SelectContent>
								</Select>
								<FormMessage />
							</FormItem>
						)}
					/>
					<FormField
						control={control}
						name='message'
						render={({ field }) => (
							<FormItem>
								<FormLabel className='text-muted-foreground text-lg'>–°–æ–æ–±—â–µ–Ω–∏–µ</FormLabel>
								<FormControl>
									<Textarea
										className='rounded-[15px] border-2 border-[#E4E5E5] placeholder:text:[#E2E2E2] min-h-25 text-lg mb-4'
										placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
										{...field}
									/>
								</FormControl>
								<FormMessage />
							</FormItem>
						)}
					/>
					<Button type='submit' size='main' variant='primary' className='w-full'>
						–û—Ç–ø—Ä–∞–≤–∏—Ç—å
					</Button>
				</form>
			</Form>
		</div>
	)
}
